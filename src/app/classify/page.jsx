"use client";

import { PredictionAPIClient } from "@azure/cognitiveservices-customvision-prediction";
import { ApiKeyCredentials } from "@azure/ms-rest-js";
import Image from "next/image";
import { useRef, useState } from "react";

export default function () {
  const [result, setResult] = useState("");
  const [pending, setPending] = useState(false);
  const fileRef = useRef();
  const [selectedImage, setSelectedImage] = useState("");

  const items = {
    glass: "Ïù¥Í±¥ Ïú†Î¶¨Ïïº!üîç\nÏú†Î¶¨Î≥ëÏùÄ Íπ®Ïßà Ïàò ÏûàÏúºÎãà ÎçòÏßÄÏßÄ ÎßêÍ≥† Ï°∞Ïã¨Ìûà Î≤ÑÎ†§Ï§ò!",
    metal: "Ïù¥Í±¥ Í∏àÏÜçÏù¥Ïïº!üîß\nÎÇ†Ïπ¥Î°úÏö¥ Î™®ÏÑúÎ¶¨Ïóê ÏÜêÏù¥ Î≤†Ïù¥ÏßÄ ÏïäÍ≤å Ï°∞Ïã¨Ìï¥!",
    plastic: "Ïù¥Í±¥ ÌîåÎùºÏä§Ìã±Ïù¥Ïïº!üå±\nÌéòÌä∏Î≥ëÏùÄ ÎùºÎ≤®ÏùÑ ÎñºÍ≥† Ï∞åÍ∑∏Îü¨Ìä∏Î†§ Î≤ÑÎ†§Ï§ò!",
    trash: "Ïù¥Í±¥ ÏùºÎ∞òÏì∞Î†àÍ∏∞Ïïº!üóëÔ∏è\nÏùºÎ∞òÏì∞Î†àÍ∏∞Îäî Ï¢ÖÎüâÏ†ú Î¥âÌà¨Ïóê Î™®ÏïÑÏ§ÑÎûò?",
    paper: "Ïù¥Í±¥ Ï¢ÖÏù¥Ïïº!üìÑ\nÏ¢ÖÏù¥Îäî Ï¢ÖÏù¥ÎÅºÎ¶¨ Î™®Ïó¨ÏßÑ Îç∞ Î≤ÑÎ†§Ï£ºÎ©¥ Îèº!",
  };

  const haldeFileChange = (evt) => {
    setPending(true);
    const selectedFile = evt.target.files[0];

    const reader = new FileReader();

    reader.onloadend = async (loadEvt) => {
      const predictionKey = process.env.NEXT_PUBLIC_PREDICTION_KEY;
      const predictionEndpoint = process.env.NEXT_PUBLIC_PREDICTION_END_POINT;
      const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;
      const modelName = process.env.NEXT_PUBLIC_MODEL_NAME;

      let info =
        "Î¨¥Ïä® Ïì∞Î†àÍ∏∞Ïù∏ÏßÄ Ïûò Î™®Î•¥Í≤†Ïñ¥.\nÏ£ºÏúÑÎ•º Ï†ïÎ¶¨ÌïòÍ≥† ÏÇ¨ÏßÑÏùÑ Îã§Ïãú Ï∞çÏñ¥Ï§ÑÎûò?";

      try {
        const credentials = new ApiKeyCredentials({
          inHeader: { "Prediction-key": predictionKey },
        });

        const predictor = new PredictionAPIClient(
          credentials,
          predictionEndpoint
        );

        const { predictions } = await predictor.classifyImage(
          projectId,
          modelName,
          selectedFile
        );

        for (let prediction of predictions) {
          if (prediction.probability * 100 > 70) {
            info = items[prediction.tagName];
            break;
          }
        }

        setTimeout(() => {
          setSelectedImage(loadEvt.target.result);
          setResult(info);
          setPending(false);
        }, 3000);
      } catch (error) {
        setPending(false);
      }
    };
    reader.readAsDataURL(selectedFile);
  };

  const handleClickBox = () => {
    fileRef.current.click();
  };

  const handleRetry = () => {
    setPending(false);
    setResult("");
    setSelectedImage("");
  };

  return (
    <article className="bg">
      {pending ? (
        <div className="loading">
          <div className="loading-message">
            <span>Ïì∞</span>
            <span>Î†à</span>
            <span>Í∏∞</span>
            <span>Î•º</span>
            <span> Ïöî</span>
            <span>Î¶¨</span>
            <span>Ï°∞</span>
            <span>Î¶¨</span>
            <span> ÏÇ¥</span>
            <span>Ìé¥</span>
            <span>Î≥¥</span>
            <span>Îäî</span>
            <span> Ï§ë</span>
            <span>.</span>
            <span>.</span>
            <span>.</span>
          </div>
          <Image
            src="/char2.png"
            alt="loading.."
            width={140}
            height={140}
          ></Image>
        </div>
      ) : result === "" ? (
        <>
          <section className="content">
            <h1 className="operate">Î≤ÑÎ¶¨Î†§Îäî Ïì∞Î†àÍ∏∞Î•º Ï∞çÏñ¥Î¥ê!</h1>
            <div className="box" onClick={handleClickBox}>
              <Image
                className="cam"
                src="/cam.png"
                alt="cam"
                width={140}
                height={140}
              />
            </div>
            <form action="" className="hidden">
              <input
                ref={fileRef}
                type="file"
                accept="image/*"
                onChange={haldeFileChange}
              />
            </form>
          </section>
          <footer className="footer">
            <h2 className="description">"Ìïú Î≤àÏóê ÌïòÎÇòÏùò Ïì∞Î†àÍ∏∞Îßå Ï∞çÏñ¥Ïïº Ìï¥"</h2>
            <section className="char1">
              <Image src="/char1.png" alt="char1" width={150} height={150} />
            </section>
          </footer>
        </>
      ) : (
        <>
          <section className="result">
            <div className="header1">
              <div className="box2">
                <Image src={selectedImage} fill={true} alt="ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄ" />
              </div>
            </div>
            <form className="body1" action="">
              <textarea
                className="message"
                defaultValue={result}
                placeholder="Î¨¥Ïä® Ïì∞Î†àÍ∏∞Ïù∏ÏßÄ Ïûò Î™®Î•¥Í≤†Ïñ¥. Ï£ºÏúÑÎ•º Ï†ïÎ¶¨ÌïòÍ≥† ÏÇ¨ÏßÑÏùÑ Îã§Ïãú Ï∞çÏñ¥Ï§ÑÎûò?"
                readOnly
              />
            </form>
            <div className="footer1">
              <button className="retry" type="button" onClick={handleRetry}>
                Îã§Ïãú Ï∞çÏñ¥Î≥¥Í∏∞
              </button>
            </div>
          </section>
        </>
      )}
    </article>
  );
}
